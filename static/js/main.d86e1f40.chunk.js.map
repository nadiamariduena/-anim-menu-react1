{"version":3,"sources":["components/Hamburger.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Hamburger","className","to","Header","Opportunities","Solutions","Contact","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAkEeA,EA/DG,WAChB,OAEE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,oCAYf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,yBAEf,yBAAKA,UAAU,WAEb,yBAAKA,UAAU,cACb,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,kBAAT,kBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,iBAKN,yBAAKD,UAAU,QACb,4CACA,sLAOF,yBAAKA,UAAU,aAAf,WAEE,uCACA,wCACA,wCACA,0CACA,2CACA,uCACA,gDC9BCE,EAtBA,WACb,OACE,gCACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,WAGF,yBAAKD,UAAU,QACb,4CAMR,kBAAC,EAAD,Q,OCMN,SAASG,IACP,OAAO,kEAGT,SAASC,IACP,OAAO,6DAGT,SAASC,IACP,OAAO,qDAGT,SAASC,IACP,OACE,yBAAKN,UAAU,aACb,yBAAKA,UAAU,WACb,mCACM,qCADN,2IASOO,MA/Cf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,iBAAiBC,UAAWP,IAC9C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,aAAaC,UAAWN,IAC1C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,cAAcC,UAAWL,WCLvCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d86e1f40.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Hamburger = () => {\n  return (\n    //  hamburger menu---------------------------------------------------------\n    <div className=\"hamburger-menu\">\n      <div className=\"menu-secondary-background-color\">\n        {/* what this div represents is:  \n        \n        if you look at the animation, when you click on the hamburger\n        there are three layers that open t the same time while the menu\n        is droping, the second layer you see underneath the white layer is this\n        div.\n        \n        \n        */}\n      </div>\n\n      <div className=\"menu-layer\">\n        <div className=\"menu-city-background\"></div>\n\n        <div className=\"wrapper\">\n          {/* -------nav -------- */}\n          <div className=\"menu-links\">\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/opportunities\">Opportunities</Link>\n                </li>\n                <li>\n                  <Link to=\"/solutions\">Solutions</Link>\n                </li>\n                <li>\n                  <Link to=\"/contact-us\">Contact us</Link>\n                </li>\n              </ul>\n            </nav>\n            {/* -------nav -------- */}\n            <div className=\"info\">\n              <h3>Our Promise.</h3>\n              <p>\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                Corrupti, provident. Excepturi unde nostrum aut labore debitis\n                tempore consequuntur enim ea?\n              </p>\n            </div>\n            {/* --- */}\n            <div className=\"locations\">\n              Location\n              <span>Paris</span>\n              <span>London</span>\n              <span>Berlin</span>\n              <span>New York</span>\n              <span>Amsterdam</span>\n              <span>Perth</span>\n              <span>Auckland</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    // end hamburger menu---------------------------------------------------------\n  );\n};\n\nexport default Hamburger;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Hamburger from \"./Hamburger\";\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"inner-header\">\n            <div className=\"logo\">\n              <Link to=\"/\">HANBRG</Link>\n            </div>\n            {/* ---------- */}\n            <div className=\"menu\">\n              <button>Menu</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* ------------ */}\n      <Hamburger />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n          <div className=\"wrapper\">\n            <div className=\"home\">\n              <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/opportunities\" component={Opportunities} />\n                <Route exact path=\"/solutions\" component={Solutions} />\n                <Route exact path=\"/contact-us\" component={Contact} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nfunction Opportunities() {\n  return <p>Discover our numerous opportunities</p>;\n}\n\nfunction Solutions() {\n  return <p>Solutions that help you. ddddd</p>;\n}\n\nfunction Contact() {\n  return <p>Feel free to reach us.</p>;\n}\n\nfunction Home() {\n  return (\n    <div className=\"container\">\n      <div className=\"wrapper\">\n        <h5>\n          The <b>HAMBRG</b>, is a creative, engineer driven, global agency\n          working on advancing the software, advertising and design communities\n          to new heights.\n        </h5>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}