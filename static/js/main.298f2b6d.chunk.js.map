{"version":3,"sources":["components/Hamburger.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Hamburger","state","menu","useRef","revealMenu","revealMenuBackground","useEffect","clicked","gsap","to","duration","height","ease","stagger","amount","css","display","initial","opacity","staggerReveal","node1","node2","from","transformOrigin","skewY","ref","el","className","withRouter","history","useState","menuName","setState","disabled","setDisabled","listen","disableMenu","setTimeout","onClick","Opportunities","Solutions","Contact","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.298f2b6d.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport gsap from \"gsap\";\n\nconst Hamburger = ({ state }) => {\n  //\n  // variables for our animated DOM nodes, they will go in each div starting from line: ....\n  let menu = useRef(null);\n  let revealMenu = useRef(null);\n  let revealMenuBackground = useRef(null);\n  let cityBackground = useRef(null);\n  let line1 = useRef(null);\n  let line2 = useRef(null);\n  let line3 = useRef(null);\n  let info = useRef(null);\n\n  // ----------------------\n  // ----------------------\n  useEffect(() => {\n    // If the menu is open and we click the menu button to close it.\n    if (state.clicked === false) {\n      // If the menu is closed and we want to open it.\n\n      /*\n      \n                                                ---------------------------\n                                                CLOSING THE MENU settings\n                                                ---------------------------\n      \n\n\n\n                                                 menu.style.display = \"none\";     **** \n                                      \n                                             YOU SHOULDNT HIDE THIS BEFORE ADDING THE GSAP anim. \n                                              otherwise it will make you crazy :)\n      */\n\n      //                                                *** G S A P * animations\n      gsap.to([revealMenu, revealMenuBackground], {\n        duration: 0.8,\n        height: 0, //0 : you will see nothing because it s hidden, go to line 71-76 to see when its open.\n        ease: \"power3.inOut\",\n        stagger: {\n          // A staggered animation consists of sequential or overlapping animations.\n          //\n          amount: 0.07,\n        },\n      });\n      // copy and paste the data below (from line 51 bis 54) take this info and past it in line 69\n      gsap.to(menu, {\n        duration: 1,\n        css: { display: \"none\" }, //display: none; is to say you want it hidden\n      });\n\n      /*\n\n\n\n                                        ****** End Closing the menu  *****\n\n\n\n    */\n    } else if (\n      state.clicked === true ||\n      (state.clicked === true && state.initial === null)\n    ) {\n      gsap.to(menu, {\n        duration: 0,\n        css: { display: \"block\" },\n      });\n      gsap.to([revealMenuBackground, revealMenu], {\n        duration: 0,\n        opacity: 1,\n        height: \"100%\",\n      });\n      staggerReveal(revealMenuBackground, revealMenu);\n    }\n  }, [state]);\n  // ----------------------\n  //  end of USE-EFFECT\n  // ----------------------\n  /*\n\n\n\n\n  \n                                        AFTER COPY AND PASTE this:\n                                            gsap.to(menu, {\n                                            duration: 0,\n                                            css: { display: \"block\" },\n                                          });\n\n                                          and changing the duration and the display: \"block\",\n                                          you have to check it one the browser: it will opens when you click\n                                          and also animate the layers of the dropdown when closing it, BUT when\n                                          you try to open it again it will not work, and that is because you \n                                          haven't defined YEt the height, as if you look the height definition in \n                                          line 42, it s set to 0 , while here it isn't defined.\n\n                                    **    So to remediate that you will have to add the following:\n\n                                               gsap.to([revealMenu, revealMenuBackground], {\n                                                            durantion: 0,\n                                                            opacity: 1,\n                                                            height: \"100%\",\n                                                          });\n\n\n                                          ONCE its done, go to the browser: open the Menu then Close it\n                                          again, WAIT a second like its specified, then open the MENU again\n                                          now it should work. This is due to the height 100%\n\n\n\n      // open the menu\n      // menu.style.display = \"block\";  YOU SHOULDNT HIDE THIS BEFORE ADDING THE GSAP anim. otherwise it will make you crazy :)\n      // menu.style.display = \"flex\"; if you add flex, its going to show weirdly\n\n\n\n                                                            **\n\n\n              The following stagger animation is useless and will work only if you add the following\n                          in line 113:\n\n                          staggerReveal(revealMenuBackground, revealMenu);\n\n                          and after that you add the following in line 115, like so: \n \n \n                                      DESCRIPT:\n                                      \n                                      NODE 1 represents: revealMenuBackground\n                                      NODE 2 represents : revealMenu\n\n\n\n*/\n\n  // staggerReveal function animation  ****\n  const staggerReveal = (node1, node2) => {\n    gsap.from([node1, node2], {\n      duration: 0.8,\n      height: 0,\n      transformOrigin: \"right top\",\n      skewY: 2,\n      ease: \"power3.inOut\",\n      stagger: {\n        amount: 0.1,\n      },\n    });\n  };\n\n  // ----------------------\n  // ----------------------\n\n  return (\n    // ref={el => (menu = el)}  , el  stands for element\n    <div ref={(el) => (menu = el)} className=\"hamburger-menu\">\n      <div\n        ref={(el) => (revealMenuBackground = el)}\n        className=\"menu-secondary-background-color\"\n      >\n        {/* what this div represents is:  \n        \n        if you look at the animation, when you click on the hamburger\n        there are three layers that open t the same time while the menu\n        is dropping, the second layer you see underneath the white layer is this\n        div.\n        \n        */}\n      </div>\n\n      <div ref={(el) => (revealMenu = el)} className=\"menu-layer\">\n        <div className=\"menu-city-background\"></div>\n\n        <div className=\"wrapper\">\n          {/* -------nav -------- */}\n          <div className=\"menu-links\">\n            <nav>\n              <ul>\n                <li>\n                  <Link ref={(el) => (line1 = el)} to=\"/opportunities\">\n                    Opportunities\n                  </Link>\n                </li>\n                <li>\n                  <Link ref={(el) => (line2 = el)} to=\"/solutions\">\n                    Solutions\n                  </Link>\n                </li>\n                <li>\n                  <Link ref={(el) => (line3 = el)} to=\"/contact-us\">\n                    Contact us\n                  </Link>\n                </li>\n              </ul>\n            </nav>\n            {/* -------nav -------- */}\n            <div ref={(el) => (info = el)} className=\"info\">\n              <h3>Our Promise.</h3>\n              <p>\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                Corrupti, provident. Excepturi unde nostrum aut labore debitis\n                tempore consequuntur enim ea?\n              </p>\n            </div>\n            {/* --- */}\n            <div className=\"locations\">\n              Location\n              <span>Paris</span>\n              <span>London</span>\n              <span>Berlin</span>\n              <span>New York</span>\n              <span>Amsterdam</span>\n              <span>Perth</span>\n              <span>Auckland</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    // end hamburger menu---------------------------------------------------------\n  );\n};\n\nexport default Hamburger;\n\n/*\n\n                                                        ****\n\n                                  I wanted to save this version, before cleaning it.\n                                  The objective is to show that you can economize time when\n                                  creating functions for the animations\n\n\n\n\n\nimport React, { useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport gsap from \"gsap\";\n\nconst Hamburger = ({ state }) => {\n\n// variables for our animated DOM nodes, they will go in each div starting from line: ....\nlet menu = useRef(null);\nlet revealMenu = useRef(null);\nlet revealMenuBackground = useRef(null);\nlet cityBackground = useRef(null);\nlet line1 = useRef(null);\nlet line2 = useRef(null);\nlet line3 = useRef(null);\nlet info = useRef(null);\n\n// ----------------------\n// ----------------------\nuseEffect(() => {\n  // If the menu is open and we click the menu button to close it.\n  if (state.clicked === false) {\n    // If the menu is closed and we want to open it.\n\n    //                                                *** G S A P * animations\n    gsap.to([revealMenu, revealMenuBackground], {\n      duration: 0.8,\n      height: 0, //0 : you will see nothing because it s hidden, go to line 71-76 to see when its open.\n      ease: \"power3.inOut\",\n      stagger: {\n        // A staggered animation consists of sequential or overlapping animations.\n        //\n        amount: 0.07,\n      },\n    });\n    // copy and paste the data below (from line 51 bis 54) take this info and past it in line 69\n    gsap.to(menu, {\n      duration: 1,\n      css: { display: \"none\" }, //display: none; is to say you want it hidden\n    });\n\n    // ---------\n  } else if (\n    state.clicked === true ||\n    (state.clicked === true && state.initial === null)\n  ) {\n    gsap.to(menu, {\n      duration: 0,\n      css: { display: \"block\" },\n    });\n    gsap.to([revealMenuBackground, revealMenu], {\n      duration: 0,\n      opacity: 1,\n      height: \"100%\",\n    });\n    staggerReveal(revealMenuBackground, revealMenu);\n  }\n}, [state]);\n\n\n// \n// -------------- RETURN\n// \n  return (\n    // ref={el => (menu = el)}  , el  stands for element\n    <div ref={(el) => (menu = el)} className=\"hamburger-menu\">\n      <div\n        ref={(el) => (revealMenuBackground = el)}\n        className=\"menu-secondary-background-color\"\n      >\n       \n        </div>\n\n        <div ref={(el) => (revealMenu = el)} className=\"menu-layer\">\n          <div className=\"menu-city-background\"></div>\n  \n          <div className=\"wrapper\">\n         \n            <div className=\"menu-links\">\n              <nav>\n                <ul>\n                  <li>\n                    <Link ref={(el) => (line1 = el)} to=\"/opportunities\">\n                      Opportunities\n                    </Link>\n                  </li>\n                  <li>\n                    <Link ref={(el) => (line2 = el)} to=\"/solutions\">\n                      Solutions\n                    </Link>\n                  </li>\n                  <li>\n                    <Link ref={(el) => (line3 = el)} to=\"/contact-us\">\n                      Contact us\n                    </Link>\n                  </li>\n                </ul>\n              </nav>\n       \n              <div ref={(el) => (info = el)} className=\"info\">\n                <h3>Our Promise.</h3>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Corrupti, provident. Excepturi unde nostrum aut labore debitis\n                  tempore consequuntur enim ea?\n                </p>\n              </div>\n           \n              <div className=\"locations\">\n                Location\n                <span>Paris</span>\n                <span>London</span>\n                <span>Berlin</span>\n                <span>New York</span>\n                <span>Amsterdam</span>\n                <span>Perth</span>\n                <span>Auckland</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  };\n*/\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\n// withRouter will give access to the history PROP\n// with the history we will be able to determine if the URL has been changed, so\n// if it s change we will execute a certain command\n// more : https://stackoverflow.com/questions/53539314/what-is-withrouter-for-in-react-router-dom\nimport Hamburger from \"./Hamburger\";\n\nconst Header = ({ history }) => {\n  // STATE FOR MENU BUTTON\n  const [state, setState] = useState({\n    /*\n\n                    **   the initial \n                    represents the origin or initial state of the page before changes\n                    in this case its false or null, like in the firegram project(before the user \n                    click on the button)\n\n\n                    **   clicked\n                    represents the hamburger Menu\n\n\n*/\n\n    initial: false,\n    clicked: null,\n    menuName: \"Menu\",\n  });\n\n  // --------\n  // Tho prevent SPAM on the button\n  //     <button onClick={handleMenu}>Menu</button>\n  // --------\n  // STATE FOR DISABLED BUTTON\n  const [disabled, setDisabled] = useState(false);\n\n  // -----------               *           ---------------\n  //\n  //\n  //\n  // USE EFFECT FOR PAGE CHANGES\n\n  useEffect(() => {\n    // here we are going to listen for changes\n    history.listen(() => {\n      setState({ clicked: false, menuName: \"Menu\" });\n    });\n  });\n\n  /*\n\n\n\n\n\n\n\n\n\n\n*/\n\n  // --------\n  // the function handleMenu will be specific to the BUTTON\n  // so that when we will click the button this function will run\n  // --------\n\n  /*\n  const handleMenu = () => {\n    disabledMenu();\n    if (state.initial === false) {\n      setState({\n        //This is the state when you first open the page\n        // initial there s nothing so it s NULL,\n        initial: null,\n        //  so then we click and it becomes true\n        clicked: true,\n        // and also when you click on it, the word \"Menu\" will change to \"Close\"\n        menuName: \"Close\",\n      });\n      // console.log(1);\n    } else if (state.clicked === true) {\n      //  click when open\n      setState({\n        clicked: !state.clicked,\n        menuName: \"Menu\",\n      });\n      // console.log(2);\n    } else if (state.clicked === false) {\n      //  click to close\n      setState({\n        clicked: !state.clicked,\n        menuName: \"Close\",\n      });\n      // console.log(3);\n    }\n  };\n\n*/\n\n  // Toggle menu\n  const handleMenu = () => {\n    disableMenu();\n    if (state.initial === false) {\n      setState({\n        initial: null,\n        clicked: true,\n        menuName: \"Close\",\n      });\n    } else if (state.clicked === true) {\n      setState({\n        clicked: !state.clicked,\n        menuName: \"Menu\",\n      });\n    } else if (state.clicked === false) {\n      setState({\n        clicked: !state.clicked,\n        menuName: \"Close\",\n      });\n    }\n  };\n\n  //Determine if out menu button should be disabled\n  const disableMenu = () => {\n    setDisabled(!disabled);\n    setTimeout(() => {\n      setDisabled(false);\n    }, 1200);\n  };\n\n  /*\n  \n  // --------\n  // connected to line 28\n  // ----------\n  // Determine of our button should be disabled or not\n  \n  const disabledMenu = () => {\n  1_ whatever the opposite of disables currently is,its\n     false right now, so it will be set to true \n    setDisabled(!disabled);\n    //2_ and once its set to true , lets do a set time out...\n    setTimeout(() => {\n      //3_ and we want to set disable back to false\n      setDisabled(false);\n      // and that will happen after 1200 milliseconds\n    }, 1200);\n  };\n\n    - we want it to run 1200 milliseconds\n    - and we want this disabledMenu FUNCTION, to run in every\n      handleMenu = () CALL, line 40, it should look like so:\n\n         const handleMenu = () => {\n            disabledMenu();\n                if (state.initial === false) {\n                  setState({\n\n\n      ** So every time we click the button, we want this to\n      run: \n                  const disabledMenu = () => {\n                      setDisabled(!disabled);\n                      setTimeout(() => {\n                        setDisabled(false);\n                      }, 1200);\n                    };\n      ** to make this work , you need to add now a disabled \n      attribute here:\n\n              <button disabled={disabled} onClick={handleMenu}>\n              the disabled attr , is going to prevent spam\n                from happening, that spam can ruin the effect\n                of the hamburger menu when opening and closing\n                it, this disabled attr is linked to line :74 and 40\n                Menu\n              </button>\n\n */\n\n  return (\n    <header>\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"inner-header\">\n            <div className=\"logo\">\n              <Link to=\"/\">HANBRG</Link>\n            </div>\n            {/* ---------- */}\n            <div className=\"menu\">\n              <button disabled={disabled} onClick={handleMenu}>\n                {/* the disabled attr , is going to prevent spam\n                from happening, that spam can ruin the effect\n                of the hamburger menu when opening and closing\n                it, this disabled attr is linked to line :74 and 40*/}\n                {state.menuName}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Hamburger state={state} />\n    </header>\n  );\n};\n\nexport default withRouter(Header);\n// withRouter will give access to the history PROP\n// with the history we will be able to determine if the URL has been changed, so\n// if it s change we will execute a certain command\n","import React from \"react\";\nimport \"./App.scss\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n          <div className=\"wrapper\">\n            <div className=\"home\">\n              <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/opportunities\" component={Opportunities} />\n                <Route exact path=\"/solutions\" component={Solutions} />\n                <Route exact path=\"/contact-us\" component={Contact} />\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nfunction Opportunities() {\n  return <p>Discover our numerous opportunities</p>;\n}\n\nfunction Solutions() {\n  return <p>Solutions that help you. ddddd</p>;\n}\n\nfunction Contact() {\n  return <p>Feel free to reach us.</p>;\n}\n\nfunction Home() {\n  return (\n    <div className=\"container\">\n      <div className=\"wrapper\">\n        <h5>\n          The <b>HAMBRG</b>, is a creative, engineer driven, global agency\n          working on advancing the software, advertising and design communities\n          to new heights.\n        </h5>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}